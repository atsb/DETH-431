#
# GRX 2.0 Library basis Makefile for DJGPP v1 and DJGPP v2
# Needs GNU Make. Make sure your shell is command.com !
#
.PHONY : clean cleanall

include ../makedefs.gnu
include ../makedefs.w32

#ifndef DEBUG
#ifndef PROFILE
#CCOPT += -fomit-frame-pointer
#endif
#endif

TAG = $(WIN32_GCC_i386_STATIC)

INCDIR= -I. -I./include -I../include

GRX20ST    = ../lib/$(GRX_LIB_SUBDIR)/libgrx20.a
GRX20STdos = $(subst /,\,$(GRX20ST))

OX=.o
OP=

include ./stdobjs.mak

# DJGPP v1 ar fails on very long command lines.
# Keep things a little smaller when building the lib ...
STD_Oa= $(STD_1) $(STD_2)  $(STD_3)  $(STD_4) $(STD_5) $(STD_6)
STD_Ob= $(STD_7) $(STD_8) $(STD_9) $(STD_10) $(STD_11) $(STD_12)
BGI_Oa= $(BGI_1) $(BGI_2) $(BGI_3)
BGI_Ob= $(BGI_4) $(BGI_5) $(BGI_6)

ADDON_O=
ifdef DEBUG
 ADDON_O += $(DBG_1)
endif

ifeq ($(HAVE_LIBTIFF),y)
  ADDON_O += $(TIF_1)
endif

ifeq ($(HAVE_LIBJPEG),y)
  ADDON_O += $(JPG_1)
endif

#ifeq ($(INCLUDE_PRINTING_CODE),y)
#  ADDON_O += $(PRN_1)
#  INCDIR += -I../addons/print
#endif

ifeq ($(INCLUDE_BMP_CODE),y)
  ADDON_O += $(BMP_1)
  INCDIR  += -I../addons/bmp
endif

ifeq ($(INCLUDE_GPC_SUPPORT),y)
  ADDON_O += $(OP)bgi/gpc_init$(OX) $(OP)bgi/gpc_text$(OX)
endif

W32_O = $(ADDON_O)              \
	fdrivers/fd_win32.o     \
	fdrivers/ram24.o        \
	fdrivers/ram32l.o       \
	fdrivers/ram32h.o       \
	mouse/w32inp.o          \
	mouse/w32keys.o         \
	vdrivers/vd_win32.o

ALL_O = $(STD_Oa) $(STD_Ob) $(BGI_Oa) $(BGI_Ob) $(W32_O)

all:    $(GRX20ST)

clean:
	if exist bgi\*.o      del bgi\*.o
	if exist draw\*.o     del draw\*.o
	if exist fdrivers\*.o del fdrivers\*.o
	if exist fonts\*.o    del fonts\*.o
	if exist image\*.o    del image\*.o
	if exist pnm\*.o      del pnm\*.o
	if exist mouse\*.o    del mouse\*.o
	if exist pattern\*.o  del pattern\*.o
	if exist setup\*.o    del setup\*.o
	if exist shape\*.o    del shape\*.o
	if exist text\*.o     del text\*.o
	if exist user\*.o     del user\*.o
	if exist utils\*.o    del utils\*.o
	if exist vdrivers\*.o del vdrivers\*.o
	if exist wideline\*.o del wideline\*.o
	if exist ..\addons\*.o del ..\addons\*.o
	if exist ..\addons\print\*.o del ..\addons\print\*.o
	if exist ..\addons\bmp\*.o   del ..\addons\bmp\*.o
	if exist $(TAG)       del $(TAG)

cleanall: clean
	if exist $(GRX20STdos) del $(GRX20STdos)

dep:
	if exist depend.tmp del depend.tmp
	gcc -MM $(CCOPT) $(INCDIR) $(ALL_O:.o=.c) >depend.tmp
	sed 's#^.*: \(.*\)\.c#\1.o: \1.c#g'   <depend.tmp >depend.w32
	if exist depend.tmp del depend.tmp

depend.b: depend.new
	sed "s#\.o:#.obj:#g" <depend.new >depend.b
	sed "s#\.o:#.asm:#g" <depend.new >>depend.b

$(GRX20ST): $(TAG) $(ALL_O)
	if exist $(GRX20STdos) del $(GRX20STdos)
	$(AR) -rv $(GRX20ST) $(STD_Oa)
	$(AR) -rv $(GRX20ST) $(STD_Ob)
	$(AR) -rv $(GRX20ST) $(BGI_Oa)
	$(AR) -rv $(GRX20ST) $(BGI_Ob)
	$(AR) -rv $(GRX20ST) $(W32_O)
	$(RANLIB) $(GRX20ST)

$(WIN32_GCC_i386_STATIC):
	$(MAKE) -f makefile.w32 clean
	if not exist $(WIN32_i386) del $(SYSTEM_TAG_PREFIX).*
	echo WIN32_GCC_i386_STATIC_TARGET > $(WIN32_GCC_i386_STATIC)

$(ALL_O): $(TAG)

$(ALL_O:.o=.i) : %.i : %.c
	$(CC) -E $(CCOPT) $(INCDIR) $*.c > $*.i

$(ALL_O:.o=.dm) : %.dm : %.c
	$(CC) -dM -E $(CCOPT) $(INCDIR) $*.c > $*.dm

.c.s:
	$(CC) -S $(CCOPT) $(INCDIR) $*.c -o $*.s

.c.o:
	$(CC) -c $(CCOPT) $(INCDIR) $*.c -o $*.o

#include depend.w32
